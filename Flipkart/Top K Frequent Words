class Solution {
public:
    struct compare {
        bool operator()(pair<int, string> &p1, pair<int, string> &p2)
        {
            if(p1.first == p2.first)
                return p1.second > p2.second;
            return p1.first < p2.first;
        }
    };
    vector<string> topKFrequent(vector<string>& words, int k) {
        unordered_map<string, int> m;
        for(auto i: words)
            m[i]++;
        vector<string> v;
        priority_queue<pair<int, string>, vector<pair<int, string>>, compare> pq;
        for(auto i: m)
            pq.push(make_pair(i.second, i.first));
        while(k--)
        {
            v.push_back(pq.top().second);
            pq.pop();
        }
        return v;
    }
};
